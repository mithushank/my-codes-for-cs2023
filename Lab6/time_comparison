#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

const int MAX_SIZE=100;

class Stack {
  private:
    int arr[MAX_SIZE];
    int top;

  public:
    Stack() {
        top = -1;
    }

    void push(int value) {
        if (top == MAX_SIZE - 1) {
            cout << "Stack is already full." << endl;
            return;
        }
        top++;
        arr[top] = value;
    }

    int pop() {
        if (top == -1) {
            cout << "Stack is empty." << endl;
            return -1;
        }
        int popped = arr[top];
        top--;
        return popped;
    }

    int StackTop() {
        if (top == -1) {
            cout << "Stack is Empty" << endl;
            return -1;
        }
        return arr[top];
    }
    
    void Display(){
        if (top == -1) {
            cout << "Stack is Empty" << endl;
            return;
        }   
        cout << "These Are The elements in Stack: ";
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << " ";
        }
        cout << endl;        
    }

    bool isEmpty() {
        return top == -1;
    }
    
    bool isFull(){
        return top == MAX_SIZE;
    }
    
};


class Node {
  public:
    int data;
    Node* next;
};

class IntStack {
  private:
    Node* top;

  public:
    IntStack() {
        top = nullptr;
    }

    void push(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = top;
        top = newNode;
    }

    int pop() {
        if (top == nullptr) {
            cout << "Stack Underflow" << endl;
            return -1;
        }
        int popped = top->data;
        Node* temp = top;
        top = top->next;
        delete temp;
        
        return popped;
    }

    int StackTop() {
        if (top == nullptr) {
            cout << "Stack is Empty" << endl;
            return -1;
        }
        
        return top->data;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is Empty" << endl;
            return;
        }
        cout << "Elements in Stack: ";
        Node* temp = top;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    ~IntStack() {
        while (top != nullptr) {
            Node* temp = top;
            top = top->next;
            delete temp;
        }
    }
};

int main() {
    auto start_ll = high_resolution_clock::now();
    IntStack s;
    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    
    s.display();
    
    
    cout << s.pop() << endl;
    cout << s.pop() << endl;
    cout << s.pop() << endl;
    cout << s.pop() << endl;
    cout << s.pop() << endl;
    
    s.display();
    

    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);
    
    s.display();
    
    auto stop_ll = high_resolution_clock::now();
    
    

    auto duration_ll = duration_cast<microseconds>(stop_ll - start_ll);
    cout << "Time taken by Linked list implementation: " << duration_ll.count() << " microseconds" << endl;
    auto start_a = high_resolution_clock::now();
    
    Stack sa;
    sa.push(8);
    sa.push(10);
    sa.push(5);
    sa.push(11);
    sa.push(15);
    sa.push(23);
    sa.push(6);
    sa.push(18);
    sa.push(20);
    sa.push(17);
    
    sa.Display();
    
    
    cout << sa.pop() << endl;
    cout << sa.pop() << endl;
    cout << sa.pop() << endl;
    cout << sa.pop() << endl;
    cout << sa.pop() << endl;
    
    sa.Display();
    

    sa.push(4);
    sa.push(30);
    sa.push(3);
    sa.push(1);
    
    sa.Display();
    auto stop_a = high_resolution_clock::now();
    
    auto duration_a = duration_cast<microseconds>(stop_a - start_a);
    cout << "Time taken by array implementation: " << duration_a.count() << " microseconds" << endl;    

    return 0;
}
