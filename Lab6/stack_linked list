#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
};

// Inorder traversal
void traverseInOrder(struct node *root) {
	if (root== NULL){
		return;
	}
	traverseInOrder(root->left);
	cout << root->key << " ";
	traverseInOrder(root->right);
	
}
//  create a new node with given value
node* create_node(int key){
	node* newnode= new node();
	newnode->key = key;
	newnode->left = NULL;
	newnode->right = NULL;
	return newnode;
}
// Insert a node
struct node *insertNode(struct node *node, int key) {
    // If the tree is empty, return a new node
    if (node == NULL) {
        return create_node(key);
    }

    // Otherwise, recur down the tree
    if (key < node->key) {
        node->left = insertNode(node->left, key);
    } else if (key > node->key) {
        node->right = insertNode(node->right, key);
    }

    // Return the (unchanged) node pointer
    return node;
}

struct node *minValueNode(node *node) {
    struct node *current = node;
    while (current && current->left != NULL) {
        current = current->left;
    }
    return current;
}
// Deleting a node
struct node *deleteNode(struct node *root, int key) {
	if (root == NULL){
		return root;
	}
	
	if (key < root->key){
		root->left = deleteNode(root->left, key);
	}
	else if (key > root->key){
		root->right = deleteNode(root->right, key);
	}
	else{
		if (root->left == NULL && root->right == NULL){
			delete root;
			root= NULL;
		}
		else if (root->left == NULL){
			root = root->right;
		}
		else if (root->right == NULL){
			root = root->left;
		}
		else{
            node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);			
		}
	}
	return root;
}

// Driver code
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseInOrder(root);
}
